/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package PBFT;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-30")
public class NewViewMessage implements org.apache.thrift.TBase<NewViewMessage, NewViewMessage._Fields>, java.io.Serializable, Cloneable, Comparable<NewViewMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewViewMessage");

  private static final org.apache.thrift.protocol.TField NEW_VIEW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newViewID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VIEW_CHANGE_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("viewChangeMessages", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField PRE_PREPARE_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("prePrepareMessages", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NewViewMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NewViewMessageTupleSchemeFactory());
  }

  public int newViewID; // required
  public Set<ViewChangeMessage> viewChangeMessages; // required
  public Set<PrePrepareMessage> prePrepareMessages; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NEW_VIEW_ID((short)1, "newViewID"),
    VIEW_CHANGE_MESSAGES((short)2, "viewChangeMessages"),
    PRE_PREPARE_MESSAGES((short)3, "prePrepareMessages");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEW_VIEW_ID
          return NEW_VIEW_ID;
        case 2: // VIEW_CHANGE_MESSAGES
          return VIEW_CHANGE_MESSAGES;
        case 3: // PRE_PREPARE_MESSAGES
          return PRE_PREPARE_MESSAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEWVIEWID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEW_VIEW_ID, new org.apache.thrift.meta_data.FieldMetaData("newViewID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEW_CHANGE_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("viewChangeMessages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ViewChangeMessage.class))));
    tmpMap.put(_Fields.PRE_PREPARE_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("prePrepareMessages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrePrepareMessage.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewViewMessage.class, metaDataMap);
  }

  public NewViewMessage() {
  }

  public NewViewMessage(
    int newViewID,
    Set<ViewChangeMessage> viewChangeMessages,
    Set<PrePrepareMessage> prePrepareMessages)
  {
    this();
    this.newViewID = newViewID;
    setNewViewIDIsSet(true);
    this.viewChangeMessages = viewChangeMessages;
    this.prePrepareMessages = prePrepareMessages;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NewViewMessage(NewViewMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.newViewID = other.newViewID;
    if (other.isSetViewChangeMessages()) {
      Set<ViewChangeMessage> __this__viewChangeMessages = new HashSet<ViewChangeMessage>(other.viewChangeMessages.size());
      for (ViewChangeMessage other_element : other.viewChangeMessages) {
        __this__viewChangeMessages.add(new ViewChangeMessage(other_element));
      }
      this.viewChangeMessages = __this__viewChangeMessages;
    }
    if (other.isSetPrePrepareMessages()) {
      Set<PrePrepareMessage> __this__prePrepareMessages = new HashSet<PrePrepareMessage>(other.prePrepareMessages.size());
      for (PrePrepareMessage other_element : other.prePrepareMessages) {
        __this__prePrepareMessages.add(new PrePrepareMessage(other_element));
      }
      this.prePrepareMessages = __this__prePrepareMessages;
    }
  }

  public NewViewMessage deepCopy() {
    return new NewViewMessage(this);
  }

  @Override
  public void clear() {
    setNewViewIDIsSet(false);
    this.newViewID = 0;
    this.viewChangeMessages = null;
    this.prePrepareMessages = null;
  }

  public int getNewViewID() {
    return this.newViewID;
  }

  public NewViewMessage setNewViewID(int newViewID) {
    this.newViewID = newViewID;
    setNewViewIDIsSet(true);
    return this;
  }

  public void unsetNewViewID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWVIEWID_ISSET_ID);
  }

  /** Returns true if field newViewID is set (has been assigned a value) and false otherwise */
  public boolean isSetNewViewID() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWVIEWID_ISSET_ID);
  }

  public void setNewViewIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWVIEWID_ISSET_ID, value);
  }

  public int getViewChangeMessagesSize() {
    return (this.viewChangeMessages == null) ? 0 : this.viewChangeMessages.size();
  }

  public java.util.Iterator<ViewChangeMessage> getViewChangeMessagesIterator() {
    return (this.viewChangeMessages == null) ? null : this.viewChangeMessages.iterator();
  }

  public void addToViewChangeMessages(ViewChangeMessage elem) {
    if (this.viewChangeMessages == null) {
      this.viewChangeMessages = new HashSet<ViewChangeMessage>();
    }
    this.viewChangeMessages.add(elem);
  }

  public Set<ViewChangeMessage> getViewChangeMessages() {
    return this.viewChangeMessages;
  }

  public NewViewMessage setViewChangeMessages(Set<ViewChangeMessage> viewChangeMessages) {
    this.viewChangeMessages = viewChangeMessages;
    return this;
  }

  public void unsetViewChangeMessages() {
    this.viewChangeMessages = null;
  }

  /** Returns true if field viewChangeMessages is set (has been assigned a value) and false otherwise */
  public boolean isSetViewChangeMessages() {
    return this.viewChangeMessages != null;
  }

  public void setViewChangeMessagesIsSet(boolean value) {
    if (!value) {
      this.viewChangeMessages = null;
    }
  }

  public int getPrePrepareMessagesSize() {
    return (this.prePrepareMessages == null) ? 0 : this.prePrepareMessages.size();
  }

  public java.util.Iterator<PrePrepareMessage> getPrePrepareMessagesIterator() {
    return (this.prePrepareMessages == null) ? null : this.prePrepareMessages.iterator();
  }

  public void addToPrePrepareMessages(PrePrepareMessage elem) {
    if (this.prePrepareMessages == null) {
      this.prePrepareMessages = new HashSet<PrePrepareMessage>();
    }
    this.prePrepareMessages.add(elem);
  }

  public Set<PrePrepareMessage> getPrePrepareMessages() {
    return this.prePrepareMessages;
  }

  public NewViewMessage setPrePrepareMessages(Set<PrePrepareMessage> prePrepareMessages) {
    this.prePrepareMessages = prePrepareMessages;
    return this;
  }

  public void unsetPrePrepareMessages() {
    this.prePrepareMessages = null;
  }

  /** Returns true if field prePrepareMessages is set (has been assigned a value) and false otherwise */
  public boolean isSetPrePrepareMessages() {
    return this.prePrepareMessages != null;
  }

  public void setPrePrepareMessagesIsSet(boolean value) {
    if (!value) {
      this.prePrepareMessages = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NEW_VIEW_ID:
      if (value == null) {
        unsetNewViewID();
      } else {
        setNewViewID((Integer)value);
      }
      break;

    case VIEW_CHANGE_MESSAGES:
      if (value == null) {
        unsetViewChangeMessages();
      } else {
        setViewChangeMessages((Set<ViewChangeMessage>)value);
      }
      break;

    case PRE_PREPARE_MESSAGES:
      if (value == null) {
        unsetPrePrepareMessages();
      } else {
        setPrePrepareMessages((Set<PrePrepareMessage>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NEW_VIEW_ID:
      return Integer.valueOf(getNewViewID());

    case VIEW_CHANGE_MESSAGES:
      return getViewChangeMessages();

    case PRE_PREPARE_MESSAGES:
      return getPrePrepareMessages();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NEW_VIEW_ID:
      return isSetNewViewID();
    case VIEW_CHANGE_MESSAGES:
      return isSetViewChangeMessages();
    case PRE_PREPARE_MESSAGES:
      return isSetPrePrepareMessages();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NewViewMessage)
      return this.equals((NewViewMessage)that);
    return false;
  }

  public boolean equals(NewViewMessage that) {
    if (that == null)
      return false;

    boolean this_present_newViewID = true;
    boolean that_present_newViewID = true;
    if (this_present_newViewID || that_present_newViewID) {
      if (!(this_present_newViewID && that_present_newViewID))
        return false;
      if (this.newViewID != that.newViewID)
        return false;
    }

    boolean this_present_viewChangeMessages = true && this.isSetViewChangeMessages();
    boolean that_present_viewChangeMessages = true && that.isSetViewChangeMessages();
    if (this_present_viewChangeMessages || that_present_viewChangeMessages) {
      if (!(this_present_viewChangeMessages && that_present_viewChangeMessages))
        return false;
      if (!this.viewChangeMessages.equals(that.viewChangeMessages))
        return false;
    }

    boolean this_present_prePrepareMessages = true && this.isSetPrePrepareMessages();
    boolean that_present_prePrepareMessages = true && that.isSetPrePrepareMessages();
    if (this_present_prePrepareMessages || that_present_prePrepareMessages) {
      if (!(this_present_prePrepareMessages && that_present_prePrepareMessages))
        return false;
      if (!this.prePrepareMessages.equals(that.prePrepareMessages))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_newViewID = true;
    list.add(present_newViewID);
    if (present_newViewID)
      list.add(newViewID);

    boolean present_viewChangeMessages = true && (isSetViewChangeMessages());
    list.add(present_viewChangeMessages);
    if (present_viewChangeMessages)
      list.add(viewChangeMessages);

    boolean present_prePrepareMessages = true && (isSetPrePrepareMessages());
    list.add(present_prePrepareMessages);
    if (present_prePrepareMessages)
      list.add(prePrepareMessages);

    return list.hashCode();
  }

  @Override
  public int compareTo(NewViewMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNewViewID()).compareTo(other.isSetNewViewID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewViewID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newViewID, other.newViewID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewChangeMessages()).compareTo(other.isSetViewChangeMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewChangeMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewChangeMessages, other.viewChangeMessages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrePrepareMessages()).compareTo(other.isSetPrePrepareMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrePrepareMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prePrepareMessages, other.prePrepareMessages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NewViewMessage(");
    boolean first = true;

    sb.append("newViewID:");
    sb.append(this.newViewID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewChangeMessages:");
    if (this.viewChangeMessages == null) {
      sb.append("null");
    } else {
      sb.append(this.viewChangeMessages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prePrepareMessages:");
    if (this.prePrepareMessages == null) {
      sb.append("null");
    } else {
      sb.append(this.prePrepareMessages);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NewViewMessageStandardSchemeFactory implements SchemeFactory {
    public NewViewMessageStandardScheme getScheme() {
      return new NewViewMessageStandardScheme();
    }
  }

  private static class NewViewMessageStandardScheme extends StandardScheme<NewViewMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NewViewMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NEW_VIEW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newViewID = iprot.readI32();
              struct.setNewViewIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIEW_CHANGE_MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                struct.viewChangeMessages = new HashSet<ViewChangeMessage>(2*_set16.size);
                ViewChangeMessage _elem17;
                for (int _i18 = 0; _i18 < _set16.size; ++_i18)
                {
                  _elem17 = new ViewChangeMessage();
                  _elem17.read(iprot);
                  struct.viewChangeMessages.add(_elem17);
                }
                iprot.readSetEnd();
              }
              struct.setViewChangeMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRE_PREPARE_MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set19 = iprot.readSetBegin();
                struct.prePrepareMessages = new HashSet<PrePrepareMessage>(2*_set19.size);
                PrePrepareMessage _elem20;
                for (int _i21 = 0; _i21 < _set19.size; ++_i21)
                {
                  _elem20 = new PrePrepareMessage();
                  _elem20.read(iprot);
                  struct.prePrepareMessages.add(_elem20);
                }
                iprot.readSetEnd();
              }
              struct.setPrePrepareMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NewViewMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NEW_VIEW_ID_FIELD_DESC);
      oprot.writeI32(struct.newViewID);
      oprot.writeFieldEnd();
      if (struct.viewChangeMessages != null) {
        oprot.writeFieldBegin(VIEW_CHANGE_MESSAGES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.viewChangeMessages.size()));
          for (ViewChangeMessage _iter22 : struct.viewChangeMessages)
          {
            _iter22.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.prePrepareMessages != null) {
        oprot.writeFieldBegin(PRE_PREPARE_MESSAGES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.prePrepareMessages.size()));
          for (PrePrepareMessage _iter23 : struct.prePrepareMessages)
          {
            _iter23.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NewViewMessageTupleSchemeFactory implements SchemeFactory {
    public NewViewMessageTupleScheme getScheme() {
      return new NewViewMessageTupleScheme();
    }
  }

  private static class NewViewMessageTupleScheme extends TupleScheme<NewViewMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NewViewMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNewViewID()) {
        optionals.set(0);
      }
      if (struct.isSetViewChangeMessages()) {
        optionals.set(1);
      }
      if (struct.isSetPrePrepareMessages()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNewViewID()) {
        oprot.writeI32(struct.newViewID);
      }
      if (struct.isSetViewChangeMessages()) {
        {
          oprot.writeI32(struct.viewChangeMessages.size());
          for (ViewChangeMessage _iter24 : struct.viewChangeMessages)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetPrePrepareMessages()) {
        {
          oprot.writeI32(struct.prePrepareMessages.size());
          for (PrePrepareMessage _iter25 : struct.prePrepareMessages)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NewViewMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.newViewID = iprot.readI32();
        struct.setNewViewIDIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set26 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.viewChangeMessages = new HashSet<ViewChangeMessage>(2*_set26.size);
          ViewChangeMessage _elem27;
          for (int _i28 = 0; _i28 < _set26.size; ++_i28)
          {
            _elem27 = new ViewChangeMessage();
            _elem27.read(iprot);
            struct.viewChangeMessages.add(_elem27);
          }
        }
        struct.setViewChangeMessagesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.prePrepareMessages = new HashSet<PrePrepareMessage>(2*_set29.size);
          PrePrepareMessage _elem30;
          for (int _i31 = 0; _i31 < _set29.size; ++_i31)
          {
            _elem30 = new PrePrepareMessage();
            _elem30.read(iprot);
            struct.prePrepareMessages.add(_elem30);
          }
        }
        struct.setPrePrepareMessagesIsSet(true);
      }
    }
  }

}

