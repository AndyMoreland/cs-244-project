/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package PBFT;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-1")
public class CheckpointMessage implements org.apache.thrift.TBase<CheckpointMessage, CheckpointMessage._Fields>, java.io.Serializable, Cloneable, Comparable<CheckpointMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckpointMessage");

  private static final org.apache.thrift.protocol.TField SEQUENCE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VIEW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("viewId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSACTION_DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionDigest", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REPLICA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaId", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CheckpointMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CheckpointMessageTupleSchemeFactory());
  }

  public int sequenceNumber; // required
  public int viewId; // required
  public ByteBuffer transactionDigest; // required
  public int replicaId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEQUENCE_NUMBER((short)1, "sequenceNumber"),
    VIEW_ID((short)2, "viewId"),
    TRANSACTION_DIGEST((short)3, "transactionDigest"),
    REPLICA_ID((short)4, "replicaId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE_NUMBER
          return SEQUENCE_NUMBER;
        case 2: // VIEW_ID
          return VIEW_ID;
        case 3: // TRANSACTION_DIGEST
          return TRANSACTION_DIGEST;
        case 4: // REPLICA_ID
          return REPLICA_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCENUMBER_ISSET_ID = 0;
  private static final int __VIEWID_ISSET_ID = 1;
  private static final int __REPLICAID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("sequenceNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEW_ID, new org.apache.thrift.meta_data.FieldMetaData("viewId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSACTION_DIGEST, new org.apache.thrift.meta_data.FieldMetaData("transactionDigest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Signature")));
    tmpMap.put(_Fields.REPLICA_ID, new org.apache.thrift.meta_data.FieldMetaData("replicaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckpointMessage.class, metaDataMap);
  }

  public CheckpointMessage() {
  }

  public CheckpointMessage(
    int sequenceNumber,
    int viewId,
    ByteBuffer transactionDigest,
    int replicaId)
  {
    this();
    this.sequenceNumber = sequenceNumber;
    setSequenceNumberIsSet(true);
    this.viewId = viewId;
    setViewIdIsSet(true);
    this.transactionDigest = org.apache.thrift.TBaseHelper.copyBinary(transactionDigest);
    this.replicaId = replicaId;
    setReplicaIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CheckpointMessage(CheckpointMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sequenceNumber = other.sequenceNumber;
    this.viewId = other.viewId;
    if (other.isSetTransactionDigest()) {
      this.transactionDigest = other.transactionDigest;
    }
    this.replicaId = other.replicaId;
  }

  public CheckpointMessage deepCopy() {
    return new CheckpointMessage(this);
  }

  @Override
  public void clear() {
    setSequenceNumberIsSet(false);
    this.sequenceNumber = 0;
    setViewIdIsSet(false);
    this.viewId = 0;
    this.transactionDigest = null;
    setReplicaIdIsSet(false);
    this.replicaId = 0;
  }

  public int getSequenceNumber() {
    return this.sequenceNumber;
  }

  public CheckpointMessage setSequenceNumber(int sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    setSequenceNumberIsSet(true);
    return this;
  }

  public void unsetSequenceNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID);
  }

  /** Returns true if field sequenceNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID);
  }

  public void setSequenceNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID, value);
  }

  public int getViewId() {
    return this.viewId;
  }

  public CheckpointMessage setViewId(int viewId) {
    this.viewId = viewId;
    setViewIdIsSet(true);
    return this;
  }

  public void unsetViewId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWID_ISSET_ID);
  }

  /** Returns true if field viewId is set (has been assigned a value) and false otherwise */
  public boolean isSetViewId() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWID_ISSET_ID);
  }

  public void setViewIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWID_ISSET_ID, value);
  }

  public byte[] getTransactionDigest() {
    setTransactionDigest(org.apache.thrift.TBaseHelper.rightSize(transactionDigest));
    return transactionDigest == null ? null : transactionDigest.array();
  }

  public ByteBuffer bufferForTransactionDigest() {
    return org.apache.thrift.TBaseHelper.copyBinary(transactionDigest);
  }

  public CheckpointMessage setTransactionDigest(byte[] transactionDigest) {
    this.transactionDigest = transactionDigest == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(transactionDigest, transactionDigest.length));
    return this;
  }

  public CheckpointMessage setTransactionDigest(ByteBuffer transactionDigest) {
    this.transactionDigest = org.apache.thrift.TBaseHelper.copyBinary(transactionDigest);
    return this;
  }

  public void unsetTransactionDigest() {
    this.transactionDigest = null;
  }

  /** Returns true if field transactionDigest is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionDigest() {
    return this.transactionDigest != null;
  }

  public void setTransactionDigestIsSet(boolean value) {
    if (!value) {
      this.transactionDigest = null;
    }
  }

  public int getReplicaId() {
    return this.replicaId;
  }

  public CheckpointMessage setReplicaId(int replicaId) {
    this.replicaId = replicaId;
    setReplicaIdIsSet(true);
    return this;
  }

  public void unsetReplicaId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICAID_ISSET_ID);
  }

  /** Returns true if field replicaId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLICAID_ISSET_ID);
  }

  public void setReplicaIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICAID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQUENCE_NUMBER:
      if (value == null) {
        unsetSequenceNumber();
      } else {
        setSequenceNumber((Integer)value);
      }
      break;

    case VIEW_ID:
      if (value == null) {
        unsetViewId();
      } else {
        setViewId((Integer)value);
      }
      break;

    case TRANSACTION_DIGEST:
      if (value == null) {
        unsetTransactionDigest();
      } else {
        setTransactionDigest((ByteBuffer)value);
      }
      break;

    case REPLICA_ID:
      if (value == null) {
        unsetReplicaId();
      } else {
        setReplicaId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE_NUMBER:
      return Integer.valueOf(getSequenceNumber());

    case VIEW_ID:
      return Integer.valueOf(getViewId());

    case TRANSACTION_DIGEST:
      return getTransactionDigest();

    case REPLICA_ID:
      return Integer.valueOf(getReplicaId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE_NUMBER:
      return isSetSequenceNumber();
    case VIEW_ID:
      return isSetViewId();
    case TRANSACTION_DIGEST:
      return isSetTransactionDigest();
    case REPLICA_ID:
      return isSetReplicaId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CheckpointMessage)
      return this.equals((CheckpointMessage)that);
    return false;
  }

  public boolean equals(CheckpointMessage that) {
    if (that == null)
      return false;

    boolean this_present_sequenceNumber = true;
    boolean that_present_sequenceNumber = true;
    if (this_present_sequenceNumber || that_present_sequenceNumber) {
      if (!(this_present_sequenceNumber && that_present_sequenceNumber))
        return false;
      if (this.sequenceNumber != that.sequenceNumber)
        return false;
    }

    boolean this_present_viewId = true;
    boolean that_present_viewId = true;
    if (this_present_viewId || that_present_viewId) {
      if (!(this_present_viewId && that_present_viewId))
        return false;
      if (this.viewId != that.viewId)
        return false;
    }

    boolean this_present_transactionDigest = true && this.isSetTransactionDigest();
    boolean that_present_transactionDigest = true && that.isSetTransactionDigest();
    if (this_present_transactionDigest || that_present_transactionDigest) {
      if (!(this_present_transactionDigest && that_present_transactionDigest))
        return false;
      if (!this.transactionDigest.equals(that.transactionDigest))
        return false;
    }

    boolean this_present_replicaId = true;
    boolean that_present_replicaId = true;
    if (this_present_replicaId || that_present_replicaId) {
      if (!(this_present_replicaId && that_present_replicaId))
        return false;
      if (this.replicaId != that.replicaId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sequenceNumber = true;
    list.add(present_sequenceNumber);
    if (present_sequenceNumber)
      list.add(sequenceNumber);

    boolean present_viewId = true;
    list.add(present_viewId);
    if (present_viewId)
      list.add(viewId);

    boolean present_transactionDigest = true && (isSetTransactionDigest());
    list.add(present_transactionDigest);
    if (present_transactionDigest)
      list.add(transactionDigest);

    boolean present_replicaId = true;
    list.add(present_replicaId);
    if (present_replicaId)
      list.add(replicaId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CheckpointMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSequenceNumber()).compareTo(other.isSetSequenceNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNumber, other.sequenceNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewId()).compareTo(other.isSetViewId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewId, other.viewId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionDigest()).compareTo(other.isSetTransactionDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionDigest, other.transactionDigest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicaId()).compareTo(other.isSetReplicaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaId, other.replicaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CheckpointMessage(");
    boolean first = true;

    sb.append("sequenceNumber:");
    sb.append(this.sequenceNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewId:");
    sb.append(this.viewId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactionDigest:");
    if (this.transactionDigest == null) {
      sb.append("null");
    } else {
      sb.append(this.transactionDigest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replicaId:");
    sb.append(this.replicaId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CheckpointMessageStandardSchemeFactory implements SchemeFactory {
    public CheckpointMessageStandardScheme getScheme() {
      return new CheckpointMessageStandardScheme();
    }
  }

  private static class CheckpointMessageStandardScheme extends StandardScheme<CheckpointMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CheckpointMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceNumber = iprot.readI32();
              struct.setSequenceNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIEW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewId = iprot.readI32();
              struct.setViewIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSACTION_DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transactionDigest = iprot.readBinary();
              struct.setTransactionDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPLICA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replicaId = iprot.readI32();
              struct.setReplicaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CheckpointMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.sequenceNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEW_ID_FIELD_DESC);
      oprot.writeI32(struct.viewId);
      oprot.writeFieldEnd();
      if (struct.transactionDigest != null) {
        oprot.writeFieldBegin(TRANSACTION_DIGEST_FIELD_DESC);
        oprot.writeBinary(struct.transactionDigest);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPLICA_ID_FIELD_DESC);
      oprot.writeI32(struct.replicaId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CheckpointMessageTupleSchemeFactory implements SchemeFactory {
    public CheckpointMessageTupleScheme getScheme() {
      return new CheckpointMessageTupleScheme();
    }
  }

  private static class CheckpointMessageTupleScheme extends TupleScheme<CheckpointMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CheckpointMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSequenceNumber()) {
        optionals.set(0);
      }
      if (struct.isSetViewId()) {
        optionals.set(1);
      }
      if (struct.isSetTransactionDigest()) {
        optionals.set(2);
      }
      if (struct.isSetReplicaId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSequenceNumber()) {
        oprot.writeI32(struct.sequenceNumber);
      }
      if (struct.isSetViewId()) {
        oprot.writeI32(struct.viewId);
      }
      if (struct.isSetTransactionDigest()) {
        oprot.writeBinary(struct.transactionDigest);
      }
      if (struct.isSetReplicaId()) {
        oprot.writeI32(struct.replicaId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CheckpointMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sequenceNumber = iprot.readI32();
        struct.setSequenceNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.viewId = iprot.readI32();
        struct.setViewIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transactionDigest = iprot.readBinary();
        struct.setTransactionDigestIsSet(true);
      }
      if (incoming.get(3)) {
        struct.replicaId = iprot.readI32();
        struct.setReplicaIdIsSet(true);
      }
    }
  }

}

